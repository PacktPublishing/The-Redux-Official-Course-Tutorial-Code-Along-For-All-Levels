{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red23\green23\blue23;\red202\green202\blue202;
\red140\green211\blue254;\red194\green126\blue101;\red70\green137\blue204;\red66\green179\blue255;\red212\green214\blue154;
\red89\green138\blue67;\red67\green192\blue160;}
{\*\expandedcolortbl;;\cssrgb\c77255\c52549\c75294;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c61176\c86275\c99608;\cssrgb\c80784\c56863\c47059;\cssrgb\c33725\c61176\c83922;\cssrgb\c30980\c75686\c100000;\cssrgb\c86275\c86275\c66667;
\cssrgb\c41569\c60000\c33333;\cssrgb\c30588\c78824\c69020;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 createAction\cf4 \strokec4 ,\cb1 \
\cb3     \cf5 \strokec5 createSlice\cf4 \strokec4 ,\cb1 \
\cb3     \cf5 \strokec5 createEntityAdapter\cf4 \strokec4 ,\cb1 \
\cb3     \cf5 \strokec5 createSelector\cf4 \strokec4 ,\cb1 \
\cb3     \cf5 \strokec5 isAnyOf\cf4 \strokec4 ,\cb1 \
\cb3   \} \cf2 \strokec2 from\cf4 \strokec4  \cf6 \strokec6 '@reduxjs/toolkit'\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 import\cf4 \strokec4  \{ \cf5 \strokec5 forceGenerateNotifications\cf4 \strokec4  \} \cf2 \strokec2 from\cf4 \strokec4  \cf6 \strokec6 '../../api/server'\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 import\cf4 \strokec4  \{ \cf5 \strokec5 apiSlice\cf4 \strokec4  \} \cf2 \strokec2 from\cf4 \strokec4  \cf6 \strokec6 '../../api/apiSlice'\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf7 \strokec7 const\cf4 \strokec4  \cf8 \strokec8 notificationsReceived\cf4 \strokec4  = \cf9 \strokec9 createAction\cf4 \strokec4 (\cb1 \
\cb3     \cf6 \strokec6 'notifications/notificationsReceived'\cf4 \cb1 \strokec4 \
\cb3   )\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 export\cf4 \strokec4  \cf7 \strokec7 const\cf4 \strokec4  \cf8 \strokec8 extendedApi\cf4 \strokec4  = \cf8 \strokec8 apiSlice\cf4 \strokec4 .\cf9 \strokec9 injectEndpoints\cf4 \strokec4 (\{\cb1 \
\cb3     \cf9 \strokec9 endpoints\cf5 \strokec5 :\cf4 \strokec4  (\cf5 \strokec5 builder\cf4 \strokec4 ) \cf7 \strokec7 =>\cf4 \strokec4  (\{\cb1 \
\cb3       \cf5 \strokec5 getNotifications:\cf4 \strokec4  \cf5 \strokec5 builder\cf4 \strokec4 .\cf9 \strokec9 query\cf4 \strokec4 (\{\cb1 \
\cb3         \cf9 \strokec9 query\cf5 \strokec5 :\cf4 \strokec4  () \cf7 \strokec7 =>\cf4 \strokec4  \cf6 \strokec6 '/notifications'\cf4 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 async\cf4 \strokec4  \cf9 \strokec9 onCacheEntryAdded\cf4 \strokec4 (\cb1 \
\cb3           \cf5 \strokec5 arg\cf4 \strokec4 ,\cb1 \
\cb3           \{ \cf9 \strokec9 updateCachedData\cf4 \strokec4 , \cf5 \strokec5 cacheDataLoaded\cf4 \strokec4 , \cf5 \strokec5 cacheEntryRemoved\cf4 \strokec4 , \cf9 \strokec9 dispatch\cf4 \strokec4  \}\cb1 \
\cb3         ) \{\cb1 \
\cb3           \cf10 \strokec10 // create a websocket connection when the cache subscription starts\cf4 \cb1 \strokec4 \
\cb3           \cf7 \strokec7 const\cf4 \strokec4  \cf8 \strokec8 ws\cf4 \strokec4  = \cf7 \strokec7 new\cf4 \strokec4  \cf11 \strokec11 WebSocket\cf4 \strokec4 (\cf6 \strokec6 'ws://localhost'\cf4 \strokec4 )\cb1 \
\cb3           \cf2 \strokec2 try\cf4 \strokec4  \{\cb1 \
\cb3             \cf10 \strokec10 // wait for the initial query to resolve before proceeding\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 await\cf4 \strokec4  \cf5 \strokec5 cacheDataLoaded\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3             \cf10 \strokec10 // when data is received from the socket connection to the server,\cf4 \cb1 \strokec4 \
\cb3             \cf10 \strokec10 // update our query result with the received message\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 const\cf4 \strokec4  \cf9 \strokec9 listener\cf4 \strokec4  = (\cf5 \strokec5 event\cf4 \strokec4 ) \cf7 \strokec7 =>\cf4 \strokec4  \{\cb1 \
\cb3               \cf7 \strokec7 const\cf4 \strokec4  \cf8 \strokec8 message\cf4 \strokec4  = \cf5 \strokec5 JSON\cf4 \strokec4 .\cf9 \strokec9 parse\cf4 \strokec4 (\cf5 \strokec5 event\cf4 \strokec4 .\cf5 \strokec5 data\cf4 \strokec4 )\cb1 \
\cb3               \cf2 \strokec2 switch\cf4 \strokec4  (\cf8 \strokec8 message\cf4 \strokec4 .\cf5 \strokec5 type\cf4 \strokec4 ) \{\cb1 \
\cb3                 \cf2 \strokec2 case\cf4 \strokec4  \cf6 \strokec6 'notifications'\cf4 \strokec4 : \{\cb1 \
\cb3                   \cf9 \strokec9 updateCachedData\cf4 \strokec4 ((\cf5 \strokec5 draft\cf4 \strokec4 ) \cf7 \strokec7 =>\cf4 \strokec4  \{\cb1 \
\cb3                     \cf10 \strokec10 // Insert all received notifications from the websocket\cf4 \cb1 \strokec4 \
\cb3                     \cf10 \strokec10 // into the existing RTKQ cache array\cf4 \cb1 \strokec4 \
\cb3                     \cf5 \strokec5 draft\cf4 \strokec4 .\cf9 \strokec9 push\cf4 \strokec4 (...\cf8 \strokec8 message\cf4 \strokec4 .\cf5 \strokec5 payload\cf4 \strokec4 )\cb1 \
\cb3                     \cf5 \strokec5 draft\cf4 \strokec4 .\cf9 \strokec9 sort\cf4 \strokec4 ((\cf5 \strokec5 a\cf4 \strokec4 , \cf5 \strokec5 b\cf4 \strokec4 ) \cf7 \strokec7 =>\cf4 \strokec4  \cf5 \strokec5 b\cf4 \strokec4 .\cf5 \strokec5 date\cf4 \strokec4 .\cf9 \strokec9 localeCompare\cf4 \strokec4 (\cf5 \strokec5 a\cf4 \strokec4 .\cf5 \strokec5 date\cf4 \strokec4 ))\cb1 \
\cb3                   \})\cb1 \
\cb3                   \cf10 \strokec10 // Dispatch an additional action so we can track "read" state\cf4 \cb1 \strokec4 \
\cb3                   \cf9 \strokec9 dispatch\cf4 \strokec4 (\cf9 \strokec9 notificationsReceived\cf4 \strokec4 (\cf8 \strokec8 message\cf4 \strokec4 .\cf5 \strokec5 payload\cf4 \strokec4 ))\cb1 \
\cb3                   \cf2 \strokec2 break\cf4 \cb1 \strokec4 \
\cb3                 \}\cb1 \
\cb3                 \cf2 \strokec2 default\cf4 \strokec4 :\cb1 \
\cb3                   \cf2 \strokec2 break\cf4 \cb1 \strokec4 \
\cb3               \}\cb1 \
\cb3             \}\cb1 \
\cb3   \cb1 \
\cb3             \cf8 \strokec8 ws\cf4 \strokec4 .\cf9 \strokec9 addEventListener\cf4 \strokec4 (\cf6 \strokec6 'message'\cf4 \strokec4 , \cf9 \strokec9 listener\cf4 \strokec4 )\cb1 \
\cb3           \} \cf2 \strokec2 catch\cf4 \strokec4  \{\cb1 \
\cb3             \cf10 \strokec10 // no-op in case `cacheEntryRemoved` resolves before `cacheDataLoaded`,\cf4 \cb1 \strokec4 \
\cb3             \cf10 \strokec10 // in which case `cacheDataLoaded` will throw\cf4 \cb1 \strokec4 \
\cb3           \}\cb1 \
\cb3           \cf10 \strokec10 // cacheEntryRemoved will resolve when the cache subscription is no longer active\cf4 \cb1 \strokec4 \
\cb3           \cf2 \strokec2 await\cf4 \strokec4  \cf5 \strokec5 cacheEntryRemoved\cf4 \cb1 \strokec4 \
\cb3           \cf10 \strokec10 // perform cleanup steps once the `cacheEntryRemoved` promise resolves\cf4 \cb1 \strokec4 \
\cb3           \cf8 \strokec8 ws\cf4 \strokec4 .\cf9 \strokec9 close\cf4 \strokec4 ()\cb1 \
\cb3         \},\cb1 \
\cb3       \}),\cb1 \
\cb3     \}),\cb1 \
\cb3   \})\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 export\cf4 \strokec4  \cf7 \strokec7 const\cf4 \strokec4  \{ \cf9 \strokec9 useGetNotificationsQuery\cf4 \strokec4  \} = \cf8 \strokec8 extendedApi\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf7 \strokec7 const\cf4 \strokec4  \cf8 \strokec8 emptyNotifications\cf4 \strokec4  = []\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 export\cf4 \strokec4  \cf7 \strokec7 const\cf4 \strokec4  \cf9 \strokec9 selectNotificationsResult\cf4 \strokec4  = \cf8 \strokec8 extendedApi\cf4 \strokec4 .\cf5 \strokec5 endpoints\cf4 \strokec4 .\cf5 \strokec5 getNotifications\cf4 \strokec4 .\cf9 \strokec9 select\cf4 \strokec4 ()\cb1 \
\cb3   \cb1 \
\cb3   \cf7 \strokec7 const\cf4 \strokec4  \cf8 \strokec8 selectNotificationsData\cf4 \strokec4  = \cf9 \strokec9 createSelector\cf4 \strokec4 (\cb1 \
\cb3     \cf9 \strokec9 selectNotificationsResult\cf4 \strokec4 ,\cb1 \
\cb3     (\cf5 \strokec5 notificationsResult\cf4 \strokec4 ) \cf7 \strokec7 =>\cf4 \strokec4  \cf5 \strokec5 notificationsResult\cf4 \strokec4 .\cf5 \strokec5 data\cf4 \strokec4  ?? \cf8 \strokec8 emptyNotifications\cf4 \cb1 \strokec4 \
\cb3   )\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 export\cf4 \strokec4  \cf7 \strokec7 const\cf4 \strokec4  \cf9 \strokec9 fetchNotificationsWebsocket\cf4 \strokec4  = () \cf7 \strokec7 =>\cf4 \strokec4  (\cf5 \strokec5 dispatch\cf4 \strokec4 , \cf5 \strokec5 getState\cf4 \strokec4 ) \cf7 \strokec7 =>\cf4 \strokec4  \{\cb1 \
\cb3     \cf7 \strokec7 const\cf4 \strokec4  \cf8 \strokec8 allNotifications\cf4 \strokec4  = \cf9 \strokec9 selectNotificationsData\cf4 \strokec4 (\cf9 \strokec9 getState\cf4 \strokec4 ())\cb1 \
\cb3     \cf7 \strokec7 const\cf4 \strokec4  [\cf8 \strokec8 latestNotification\cf4 \strokec4 ] = \cf8 \strokec8 allNotifications\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 const\cf4 \strokec4  \cf8 \strokec8 latestTimestamp\cf4 \strokec4  = \cf8 \strokec8 latestNotification\cf4 \strokec4 ?.\cf5 \strokec5 date\cf4 \strokec4  ?? \cf6 \strokec6 ''\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 // Hardcode a call to the mock server to simulate a server push scenario over websockets\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 forceGenerateNotifications\cf4 \strokec4 (\cf8 \strokec8 latestTimestamp\cf4 \strokec4 )\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf7 \strokec7 const\cf4 \strokec4  \cf8 \strokec8 notificationsAdapter\cf4 \strokec4  = \cf9 \strokec9 createEntityAdapter\cf4 \strokec4 ()\cb1 \
\cb3   \cb1 \
\cb3   \cf7 \strokec7 const\cf4 \strokec4  \cf9 \strokec9 matchNotificationsReceived\cf4 \strokec4  = \cf9 \strokec9 isAnyOf\cf4 \strokec4 (\cb1 \
\cb3     \cf8 \strokec8 notificationsReceived\cf4 \strokec4 ,\cb1 \
\cb3     \cf8 \strokec8 extendedApi\cf4 \strokec4 .\cf5 \strokec5 endpoints\cf4 \strokec4 .\cf5 \strokec5 getNotifications\cf4 \strokec4 .\cf9 \strokec9 matchFulfilled\cf4 \cb1 \strokec4 \
\cb3   )\cb1 \
\cb3   \cb1 \
\cb3   \cf7 \strokec7 const\cf4 \strokec4  \cf8 \strokec8 notificationsSlice\cf4 \strokec4  = \cf9 \strokec9 createSlice\cf4 \strokec4 (\{\cb1 \
\cb3     \cf5 \strokec5 name:\cf4 \strokec4  \cf6 \strokec6 'notifications'\cf4 \strokec4 ,\cb1 \
\cb3     \cf5 \strokec5 initialState:\cf4 \strokec4  \cf8 \strokec8 notificationsAdapter\cf4 \strokec4 .\cf9 \strokec9 getInitialState\cf4 \strokec4 (),\cb1 \
\cb3     \cf5 \strokec5 reducers:\cf4 \strokec4  \{\cb1 \
\cb3       \cf9 \strokec9 allNotificationsRead\cf4 \strokec4 (\cf5 \strokec5 state\cf4 \strokec4 , \cf5 \strokec5 action\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf11 \strokec11 Object\cf4 \strokec4 .\cf9 \strokec9 values\cf4 \strokec4 (\cf5 \strokec5 state\cf4 \strokec4 .\cf5 \strokec5 entities\cf4 \strokec4 ).\cf9 \strokec9 forEach\cf4 \strokec4 ((\cf5 \strokec5 notification\cf4 \strokec4 ) \cf7 \strokec7 =>\cf4 \strokec4  \{\cb1 \
\cb3           \cf5 \strokec5 notification\cf4 \strokec4 .\cf5 \strokec5 read\cf4 \strokec4  = \cf7 \strokec7 true\cf4 \cb1 \strokec4 \
\cb3         \})\cb1 \
\cb3       \},\cb1 \
\cb3     \},\cb1 \
\cb3     \cf9 \strokec9 extraReducers\cf4 \strokec4 (\cf5 \strokec5 builder\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 builder\cf4 \strokec4 .\cf9 \strokec9 addMatcher\cf4 \strokec4 (\cf9 \strokec9 matchNotificationsReceived\cf4 \strokec4 , (\cf5 \strokec5 state\cf4 \strokec4 , \cf5 \strokec5 action\cf4 \strokec4 ) \cf7 \strokec7 =>\cf4 \strokec4  \{\cb1 \
\cb3         \cf10 \strokec10 // Add client-side metadata for tracking new notifications\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 const\cf4 \strokec4  \cf8 \strokec8 notificationsMetadata\cf4 \strokec4  = \cf5 \strokec5 action\cf4 \strokec4 .\cf5 \strokec5 payload\cf4 \strokec4 .\cf9 \strokec9 map\cf4 \strokec4 ((\cf5 \strokec5 notification\cf4 \strokec4 ) \cf7 \strokec7 =>\cf4 \strokec4  (\{\cb1 \
\cb3           \cf5 \strokec5 id:\cf4 \strokec4  \cf5 \strokec5 notification\cf4 \strokec4 .\cf5 \strokec5 id\cf4 \strokec4 ,\cb1 \
\cb3           \cf5 \strokec5 read:\cf4 \strokec4  \cf7 \strokec7 false\cf4 \strokec4 ,\cb1 \
\cb3           \cf5 \strokec5 isNew:\cf4 \strokec4  \cf7 \strokec7 true\cf4 \strokec4 ,\cb1 \
\cb3         \}))\cb1 \
\cb3   \cb1 \
\cb3         \cf11 \strokec11 Object\cf4 \strokec4 .\cf9 \strokec9 values\cf4 \strokec4 (\cf5 \strokec5 state\cf4 \strokec4 .\cf5 \strokec5 entities\cf4 \strokec4 ).\cf9 \strokec9 forEach\cf4 \strokec4 ((\cf5 \strokec5 notification\cf4 \strokec4 ) \cf7 \strokec7 =>\cf4 \strokec4  \{\cb1 \
\cb3           \cf10 \strokec10 // Any notifications we've read are no longer new\cf4 \cb1 \strokec4 \
\cb3           \cf5 \strokec5 notification\cf4 \strokec4 .\cf5 \strokec5 isNew\cf4 \strokec4  = !\cf5 \strokec5 notification\cf4 \strokec4 .\cf5 \strokec5 read\cf4 \cb1 \strokec4 \
\cb3         \})\cb1 \
\cb3   \cb1 \
\cb3         \cf8 \strokec8 notificationsAdapter\cf4 \strokec4 .\cf9 \strokec9 upsertMany\cf4 \strokec4 (\cf5 \strokec5 state\cf4 \strokec4 , \cf8 \strokec8 notificationsMetadata\cf4 \strokec4 )\cb1 \
\cb3       \})\cb1 \
\cb3     \},\cb1 \
\cb3   \})\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 export\cf4 \strokec4  \cf7 \strokec7 const\cf4 \strokec4  \{ \cf8 \strokec8 allNotificationsRead\cf4 \strokec4  \} = \cf8 \strokec8 notificationsSlice\cf4 \strokec4 .\cf5 \strokec5 actions\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 export\cf4 \strokec4  \cf2 \strokec2 default\cf4 \strokec4  \cf8 \strokec8 notificationsSlice\cf4 \strokec4 .\cf9 \strokec9 reducer\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 export\cf4 \strokec4  \cf7 \strokec7 const\cf4 \strokec4  \{\cb1 \
\cb3     \cf5 \strokec5 selectAll\cf4 \strokec4 : \cf9 \strokec9 selectNotificationsMetadata\cf4 \strokec4 ,\cb1 \
\cb3     \cf5 \strokec5 selectEntities\cf4 \strokec4 : \cf9 \strokec9 selectMetadataEntities\cf4 \strokec4 ,\cb1 \
\cb3   \} = \cf8 \strokec8 notificationsAdapter\cf4 \strokec4 .\cf9 \strokec9 getSelectors\cf4 \strokec4 ((\cf5 \strokec5 state\cf4 \strokec4 ) \cf7 \strokec7 =>\cf4 \strokec4  \cf5 \strokec5 state\cf4 \strokec4 .\cf5 \strokec5 notifications\cf4 \strokec4 )\cb1 \
\cb3   \cb1 \
}